"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1851],{5162:(e,t,a)=>{a.d(t,{Z:()=>f});var n=a(7378),s=a(8944),i=a(5161),o=a(1884),r=a(5626),l=a(9213);const c={cardContainer:"cardContainer_H47c",cardTitle:"cardTitle_tTnA",cardDescription:"cardDescription_rTl4"};function d(e){let{href:t,children:a}=e;return n.createElement(o.Z,{href:t,className:(0,s.Z)("card padding--lg",c.cardContainer)},a)}function m(e){let{href:t,icon:a,title:i,description:o}=e;return n.createElement(d,{href:t},n.createElement("h2",{className:(0,s.Z)("text--truncate",c.cardTitle),title:i},a," ",i),o&&n.createElement("p",{className:(0,s.Z)("text--truncate",c.cardDescription),title:o},o))}function h(e){let{item:t}=e;const a=(0,i.Wl)(t);return a?n.createElement(m,{href:a,icon:"\ud83d\uddc3\ufe0f",title:t.label,description:(0,l.I)({message:"{count} items",id:"theme.docs.DocCard.categoryDescription",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t.items.length})}):null}function p(e){let{item:t}=e;const a=(0,r.Z)(t.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",s=(0,i.xz)(t.docId??void 0);return n.createElement(m,{href:t.href,icon:a,title:t.label,description:s?.description})}function u(e){let{item:t}=e;switch(t.type){case"link":return n.createElement(p,{item:t});case"category":return n.createElement(h,{item:t});default:throw new Error(`unknown item type ${JSON.stringify(t)}`)}}function g(e){let{className:t}=e;const a=(0,i.jA)();return n.createElement(f,{items:a.items,className:t})}function f(e){const{items:t,className:a}=e;if(!t)return n.createElement(g,e);const o=(0,i.MN)(t);return n.createElement("section",{className:(0,s.Z)("row",a)},o.map(((e,t)=>n.createElement("article",{key:t,className:"col col--6 margin-bottom--lg"},n.createElement(u,{item:e})))))}},5904:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>c,default:()=>g,frontMatter:()=>l,metadata:()=>d,toc:()=>h});var n=a(5773),s=(a(7378),a(5318)),i=a(6538);const o='import { ChatOpenAI } from "langchain/chat_models";\nimport { HumanChatMessage } from "langchain/schema";\n\nexport const run = async () => {\n  const chat = new ChatOpenAI();\n  // Pass in a list of messages to `call` to start a conversation. In this simple example, we only pass in one message.\n  const response = await chat.call([\n    new HumanChatMessage(\n      "What is a good name for a company that makes colorful socks?"\n    ),\n  ]);\n  console.log(response);\n  // AIChatMessage { text: \'\\n\\nRainbow Sox Co.\' }\n};\n';var r=a(5162);const l={hide_table_of_contents:!0,sidebar_label:"Chat Models"},c="Getting Started: Chat Models",d={unversionedId:"modules/models/chat/index",id:"modules/models/chat/index",title:"Getting Started: Chat Models",description:"Conceptual Guide",source:"@site/docs/modules/models/chat/index.mdx",sourceDirName:"modules/models/chat",slug:"/modules/models/chat/",permalink:"/langchainjs/docs/modules/models/chat/",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/docs/modules/models/chat/index.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0,sidebar_label:"Chat Models"},sidebar:"sidebar",previous:{title:"Models",permalink:"/langchainjs/docs/modules/models/"},next:{title:"Integrations",permalink:"/langchainjs/docs/modules/models/chat/integrations"}},m={},h=[{value:"Chat Messages",id:"chat-messages",level:2},{value:"Dig deeper",id:"dig-deeper",level:2}],p={toc:h},u="wrapper";function g(e){let{components:t,...a}=e;return(0,s.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"getting-started-chat-models"},"Getting Started: Chat Models"),(0,s.kt)("admonition",{type:"info"},(0,s.kt)("p",{parentName:"admonition"},(0,s.kt)("a",{parentName:"p",href:"https://docs.langchain.com/docs/components/models/chat-model"},"Conceptual Guide"))),(0,s.kt)("p",null,'LangChain provides a standard interface for using chat models. Chat models are a variation on language models.\nWhile chat models use language models under the hood, the interface they expose is a bit different.\nRather than expose a "text in, text out" API, they expose an interface where "chat messages" are the inputs and outputs.'),(0,s.kt)("h2",{id:"chat-messages"},"Chat Messages"),(0,s.kt)("p",null,"A ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatMessage")," is what we refer to as the modular unit of information for a chat model.\nAt the moment, this consists of a ",(0,s.kt)("inlineCode",{parentName:"p"},'"text"')," field, which refers to the content of the chat message."),(0,s.kt)("p",null,"There are currently four different classes of ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatMessage")," supported by LangChain:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"HumanChatMessage"),": A chat message that is sent as if from a Human's point of view."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"AIChatMessage"),": A chat message that is sent from the point of view of the AI system to which the Human is corresponding."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"SystemChatMessage"),": A chat message that gives the AI system some information about the conversation. This is usually sent at the beginning of a conversation."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ChatMessage"),": A generic chat message, with not only a ",(0,s.kt)("inlineCode",{parentName:"li"},'"text"')," field but also an arbitrary ",(0,s.kt)("inlineCode",{parentName:"li"},'"role"')," field.")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("em",{parentName:"strong"},"Note:"))," Currently, the only chat-based model we support is ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatOpenAI")," (with gpt-4 and gpt-3.5-turbo), but anticipate adding more in the future.")),(0,s.kt)("p",null,"To get started, simply use the ",(0,s.kt)("inlineCode",{parentName:"p"},"call")," method of an ",(0,s.kt)("inlineCode",{parentName:"p"},"LLM")," implementation, passing in a ",(0,s.kt)("inlineCode",{parentName:"p"},"string")," input. In this example, we are using the ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatOpenAI")," implementation:"),(0,s.kt)(i.Z,{language:"typescript",mdxType:"CodeBlock"},o),(0,s.kt)("h2",{id:"dig-deeper"},"Dig deeper"),(0,s.kt)(r.Z,{mdxType:"DocCardList"}))}g.isMDXComponent=!0}}]);