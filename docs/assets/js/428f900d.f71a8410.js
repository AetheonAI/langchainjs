"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8794],{5318:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7378);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=a,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return t?r.createElement(f,i(i({ref:n},u),{},{components:t})):r.createElement(f,i({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9798:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(7378),a=t(8944);const o={tabItem:"tabItem_wHwb"};function i(e){let{children:n,hidden:t,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o.tabItem,i),hidden:t},n)}},3930:(e,n,t)=>{t.d(n,{Z:()=>E});var r=t(5773),a=t(7378),o=t(8944),i=t(3457),s=t(3620),c=t(654),l=t(784),u=t(1819);function d(e){return function(e){return a.Children.map(e,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:n,label:t,attributes:r,default:a}}=e;return{value:n,label:t,attributes:r,default:a}}))}function p(e){const{values:n,children:t}=e;return(0,a.useMemo)((()=>{const e=n??d(t);return function(e){const n=(0,l.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function m(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function f(e){let{queryString:n=!1,groupId:t}=e;const r=(0,s.k6)(),o=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,c._X)(o),(0,a.useCallback)((e=>{if(!o)return;const n=new URLSearchParams(r.location.search);n.set(o,e),r.replace({...r.location,search:n.toString()})}),[o,r])]}function b(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,o=p(e),[i,s]=(0,a.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!m({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const r=t.find((e=>e.default))??t[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:o}))),[c,l]=f({queryString:t,groupId:r}),[d,b]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,o]=(0,u.Nk)(t);return[r,(0,a.useCallback)((e=>{t&&o.set(e)}),[t,o])]}({groupId:r}),h=(()=>{const e=c??d;return m({value:e,tabValues:o})?e:null})();(0,a.useLayoutEffect)((()=>{h&&s(h)}),[h]);return{selectedValue:i,selectValue:(0,a.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),l(e),b(e)}),[l,b,o]),tabValues:o}}var h=t(6457);const v={tabList:"tabList_J5MA",tabItem:"tabItem_l0OV"};function g(e){let{className:n,block:t,selectedValue:s,selectValue:c,tabValues:l}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.o5)(),p=e=>{const n=e.currentTarget,t=u.indexOf(n),r=l[t].value;r!==s&&(d(n),c(r))},m=e=>{let n=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":t},n)},l.map((e=>{let{value:n,label:t,attributes:i}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,key:n,ref:e=>u.push(e),onKeyDown:m,onClick:p},i,{className:(0,o.Z)("tabs__item",v.tabItem,i?.className,{"tabs__item--active":s===n})}),t??n)})))}function y(e){let{lazy:n,children:t,selectedValue:r}=e;if(t=Array.isArray(t)?t:[t],n){const e=t.find((e=>e.props.value===r));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},t.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==r}))))}function w(e){const n=b(e);return a.createElement("div",{className:(0,o.Z)("tabs-container",v.tabList)},a.createElement(g,(0,r.Z)({},e,n)),a.createElement(y,(0,r.Z)({},e,n)))}function E(e){const n=(0,h.Z)();return a.createElement(w,(0,r.Z)({key:String(n)},e))}},7354:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>f,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var r=t(5773),a=(t(7378),t(5318)),o=t(3930),i=t(9798);const s={},c="Pinecone",l={unversionedId:"modules/indexes/vector_stores/integrations/pinecone",id:"modules/indexes/vector_stores/integrations/pinecone",title:"Pinecone",description:"Langchain.js accepts @pinecone-database/pinecone as the client for Pinecone vectorstore. Install the library with",source:"@site/docs/modules/indexes/vector_stores/integrations/pinecone.md",sourceDirName:"modules/indexes/vector_stores/integrations",slug:"/modules/indexes/vector_stores/integrations/pinecone",permalink:"/langchainjs/docs/modules/indexes/vector_stores/integrations/pinecone",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/docs/modules/indexes/vector_stores/integrations/pinecone.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"HNSWLib",permalink:"/langchainjs/docs/modules/indexes/vector_stores/integrations/hnswlib"},next:{title:"Supabase",permalink:"/langchainjs/docs/modules/indexes/vector_stores/integrations/supabase"}},u={},d=[{value:"Index docs",id:"index-docs",level:2},{value:"Query docs",id:"query-docs",level:2}],p={toc:d},m="wrapper";function f(e){let{components:n,...t}=e;return(0,a.kt)(m,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"pinecone"},"Pinecone"),(0,a.kt)("p",null,"Langchain.js accepts ",(0,a.kt)("a",{parentName:"p",href:"https://docs.pinecone.io/docs/node-client"},"@pinecone-database/pinecone")," as the client for Pinecone vectorstore. Install the library with"),(0,a.kt)(o.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"npm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -S dotenv langchain @pinecone-database/pinecone\n"))),(0,a.kt)(i.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add -S dotenv langchain @pinecone-database/pinecone\n")))),(0,a.kt)("h2",{id:"index-docs"},"Index docs"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { PineconeClient } from "@pinecone-database/pinecone";\nimport * as dotenv from "dotenv";\nimport { Document } from "langchain/document";\nimport { OpenAIEmbeddings } from "langchain/embeddings";\nimport { PineconeStore } from "langchain/vectorstores";\n\ndotenv.config();\n\nconst client = new PineconeClient();\nawait client.init({\n  apiKey: process.env.PINECONE_API_KEY,\n  environment: process.env.PINECONE_ENVIRONMENT,\n});\nconst pineconeIndex = client.Index(process.env.PINECONE_INDEX);\n\nconst docs = [\n  new Document({\n    metadata: { foo: "bar" },\n    pageContent: "pinecone is a vector db",\n  }),\n  new Document({\n    metadata: { foo: "bar" },\n    pageContent: "the quick brown fox jumped over the lazy dog",\n  }),\n  new Document({\n    metadata: { baz: "qux" },\n    pageContent: "lorem ipsum dolor sit amet",\n  }),\n  new Document({\n    metadata: { baz: "qux" },\n    pageContent: "pinecones are the woody fruiting body and of a pine tree",\n  }),\n];\n\nawait PineconeStore.fromDocuments(docs, new OpenAIEmbeddings(), {\n  pineconeIndex,\n});\n')),(0,a.kt)("h2",{id:"query-docs"},"Query docs"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { PineconeClient } from "@pinecone-database/pinecone";\nimport * as dotenv from "dotenv";\nimport { VectorDBQAChain } from "langchain/chains";\nimport { OpenAIEmbeddings } from "langchain/embeddings";\nimport { OpenAI } from "langchain/llms";\nimport { PineconeStore } from "langchain/vectorstores";\n\ndotenv.config();\n\nconst client = new PineconeClient();\nawait client.init({\n  apiKey: process.env.PINECONE_API_KEY,\n  environment: process.env.PINECONE_ENVIRONMENT,\n});\nconst pineconeIndex = client.Index(process.env.PINECONE_INDEX);\n\nconst vectorStore = await PineconeStore.fromExistingIndex(\n  new OpenAIEmbeddings(),\n  { pineconeIndex }\n);\n\n/* Search the vector DB independently with meta filters */\nconst results = await vectorStore.similaritySearch("pinecone", 1, {\n  foo: "bar",\n});\nconsole.log(results);\n/*\n[\n  Document {\n    pageContent: \'pinecone is a vector db\',\n    metadata: { foo: \'bar\' }\n  }\n]\n*/\n\n/* Use as part of a chain (currently no metadata filters) */\nconst model = new OpenAI();\nconst chain = VectorDBQAChain.fromLLM(model, vectorStore, {\n  k: 1,\n  returnSourceDocuments: true,\n});\nconst response = await chain.call({ query: "What is pinecone?" });\nconsole.log(response);\n/*\n{\n  text: \' A pinecone is the woody fruiting body of a pine tree.\',\n  sourceDocuments: [\n    Document {\n      pageContent: \'pinecones are the woody fruiting body and of a pine tree\',\n      metadata: [Object]\n    }\n  ]\n}\n*/\n')))}f.isMDXComponent=!0}}]);