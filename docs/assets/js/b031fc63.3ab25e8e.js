"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7047],{3603:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>m,default:()=>x,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var a=n(5773),l=(n(7378),n(5318)),o=n(6538);const p='import {\n  LengthBasedExampleSelector,\n  PromptTemplate,\n  FewShotPromptTemplate,\n} from "langchain/prompts";\n\nexport async function run() {\n  // Create a prompt template that will be used to format the examples.\n  const examplePrompt = new PromptTemplate({\n    inputVariables: ["input", "output"],\n    template: "Input: {input}\\nOutput: {output}",\n  });\n\n  // Create a LengthBasedExampleSelector that will be used to select the examples.\n  const exampleSelector = await LengthBasedExampleSelector.fromExamples(\n    [\n      { input: "happy", output: "sad" },\n      { input: "tall", output: "short" },\n      { input: "energetic", output: "lethargic" },\n      { input: "sunny", output: "gloomy" },\n      { input: "windy", output: "calm" },\n    ],\n    {\n      examplePrompt,\n      maxLength: 25,\n    }\n  );\n\n  // Create a FewShotPromptTemplate that will use the example selector.\n  const dynamicPrompt = new FewShotPromptTemplate({\n    // We provide an ExampleSelector instead of examples.\n    exampleSelector,\n    examplePrompt,\n    prefix: "Give the antonym of every input",\n    suffix: "Input: {adjective}\\nOutput:",\n    inputVariables: ["adjective"],\n  });\n\n  // An example with small input, so it selects all examples.\n  console.log(await dynamicPrompt.format({ adjective: "big" }));\n  /*\n   Give the antonym of every input\n\n   Input: happy\n   Output: sad\n\n   Input: tall\n   Output: short\n\n   Input: energetic\n   Output: lethargic\n\n   Input: sunny\n   Output: gloomy\n\n   Input: windy\n   Output: calm\n\n   Input: big\n   Output:\n   */\n\n  // An example with long input, so it selects only one example.\n  const longString =\n    "big and huge and massive and large and gigantic and tall and much much much much much bigger than everything else";\n  console.log(await dynamicPrompt.format({ adjective: longString }));\n  /*\n   Give the antonym of every input\n\n   Input: happy\n   Output: sad\n\n   Input: big and huge and massive and large and gigantic and tall and much much much much much bigger than everything else\n   Output:\n   */\n}\n',i='import { OpenAIEmbeddings } from "langchain/embeddings";\nimport {\n  SemanticSimilarityExampleSelector,\n  PromptTemplate,\n  FewShotPromptTemplate,\n} from "langchain/prompts";\nimport { HNSWLib } from "langchain/vectorstores";\n\nexport async function run() {\n  // Create a prompt template that will be used to format the examples.\n  const examplePrompt = new PromptTemplate({\n    inputVariables: ["input", "output"],\n    template: "Input: {input}\\nOutput: {output}",\n  });\n\n  // Create a SemanticSimilarityExampleSelector that will be used to select the examples.\n  const exampleSelector = await SemanticSimilarityExampleSelector.fromExamples(\n    [\n      { input: "happy", output: "sad" },\n      { input: "tall", output: "short" },\n      { input: "energetic", output: "lethargic" },\n      { input: "sunny", output: "gloomy" },\n      { input: "windy", output: "calm" },\n    ],\n    new OpenAIEmbeddings(),\n    HNSWLib,\n    { k: 1 }\n  );\n\n  // Create a FewShotPromptTemplate that will use the example selector.\n  const dynamicPrompt = new FewShotPromptTemplate({\n    // We provide an ExampleSelector instead of examples.\n    exampleSelector,\n    examplePrompt,\n    prefix: "Give the antonym of every input",\n    suffix: "Input: {adjective}\\nOutput:",\n    inputVariables: ["adjective"],\n  });\n\n  // Input is about the weather, so should select eg. the sunny/gloomy example\n  console.log(await dynamicPrompt.format({ adjective: "rainy" }));\n  /*\n   Give the antonym of every input\n\n   Input: sunny\n   Output: gloomy\n\n   Input: rainy\n   Output:\n   */\n\n  // Input is a measurement, so should select the tall/short example\n  console.log(await dynamicPrompt.format({ adjective: "large" }));\n  /*\n   Give the antonym of every input\n\n   Input: tall\n   Output: short\n\n   Input: large\n   Output:\n   */\n}\n',s={hide_table_of_contents:!0,sidebar_label:"Example Selectors",sidebar_position:3},m="Example Selectors",r={unversionedId:"modules/prompts/example_selectors/index",id:"modules/prompts/example_selectors/index",title:"Example Selectors",description:"Conceptual Guide",source:"@site/docs/modules/prompts/example_selectors/index.mdx",sourceDirName:"modules/prompts/example_selectors",slug:"/modules/prompts/example_selectors/",permalink:"/langchainjs/docs/modules/prompts/example_selectors/",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/docs/modules/prompts/example_selectors/index.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{hide_table_of_contents:!0,sidebar_label:"Example Selectors",sidebar_position:3},sidebar:"sidebar",previous:{title:"Output Parsers",permalink:"/langchainjs/docs/modules/prompts/output_parsers/"},next:{title:"Indexes",permalink:"/langchainjs/docs/modules/indexes/"}},u={},c=[{value:"Select by Length",id:"select-by-length",level:2},{value:"Select by Similarity",id:"select-by-similarity",level:2}],d={toc:c},h="wrapper";function x(e){let{components:t,...n}=e;return(0,l.kt)(h,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"example-selectors"},"Example Selectors"),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},(0,l.kt)("a",{parentName:"p",href:"https://docs.langchain.com/docs/components/example-selectors"},"Conceptual Guide"))),(0,l.kt)("p",null,"If you have a large number of examples, you may need to programmatically select which ones to include in the prompt. The ExampleSelector is the class responsible for doing so. The base interface is defined as below."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-typescript"},"class BaseExampleSelector {\n  addExample(example: Example): Promise<void | string>;\n\n  selectExamples(input_variables: Example): Promise<Example[]>;\n}\n")),(0,l.kt)("p",null,"It needs to expose a ",(0,l.kt)("inlineCode",{parentName:"p"},"selectExamples")," - this takes in the input variables and then returns a list of examples method - and an ",(0,l.kt)("inlineCode",{parentName:"p"},"addExample")," method, which saves an example for later selection. It is up to each specific implementation as to how those examples are saved and selected. Let\u2019s take a look at some below."),(0,l.kt)("h2",{id:"select-by-length"},"Select by Length"),(0,l.kt)("p",null,"This ",(0,l.kt)("inlineCode",{parentName:"p"},"ExampleSelector")," selects which examples to use based on length. This is useful when you are worried about constructing a prompt that will go over the length of the context window. For longer inputs, it will select fewer examples to include, while for shorter inputs it will select more."),(0,l.kt)(o.Z,{language:"typescript",mdxType:"CodeBlock"},p),(0,l.kt)("h2",{id:"select-by-similarity"},"Select by Similarity"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"SemanticSimilarityExampleSelector")," selects examples based on which examples are most similar to the inputs. It does this by finding the examples with the embeddings that have the greatest cosine similarity with the inputs."),(0,l.kt)(o.Z,{language:"typescript",mdxType:"CodeBlock"},i))}x.isMDXComponent=!0}}]);