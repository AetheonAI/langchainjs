"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7668],{5318:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var s=a(7378);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,s)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,s,n=function(e,t){if(null==e)return{};var a,s,n={},r=Object.keys(e);for(s=0;s<r.length;s++)a=r[s],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)a=r[s],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var c=s.createContext({}),l=function(e){var t=s.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=l(e.components);return s.createElement(c.Provider,{value:t},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},p=s.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,c=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),h=l(a),p=n,d=h["".concat(c,".").concat(p)]||h[p]||u[p]||r;return a?s.createElement(d,o(o({ref:t},m),{},{components:a})):s.createElement(d,o({ref:t},m))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,o=new Array(r);o[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[h]="string"==typeof e?e:n,o[1]=i;for(var l=2;l<r;l++)o[l]=a[l];return s.createElement.apply(null,o)}return s.createElement.apply(null,a)}p.displayName="MDXCreateElement"},4653:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var s=a(5773),n=(a(7378),a(5318));const r={hide_table_of_contents:!0,sidebar_position:1},o="Chat Messages",i={unversionedId:"modules/schema/chat-messages",id:"modules/schema/chat-messages",title:"Chat Messages",description:"The primary interface through which end users interact with LLMs is a chat interface. For this reason, some model providers have started providing access to the underlying API in a way that expects chat messages. These messages have a content field (which is usually text) and are associated with a user (or role). Right now the supported users are System, Human, and AI.",source:"@site/docs/modules/schema/chat-messages.md",sourceDirName:"modules/schema",slug:"/modules/schema/chat-messages",permalink:"/langchainjs/docs/modules/schema/chat-messages",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/docs/modules/schema/chat-messages.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{hide_table_of_contents:!0,sidebar_position:1},sidebar:"sidebar",previous:{title:"Schema",permalink:"/langchainjs/docs/modules/schema/"},next:{title:"Document",permalink:"/langchainjs/docs/modules/schema/document"}},c={},l=[{value:"SystemChatMessage",id:"systemchatmessage",level:2},{value:"HumanChatMessage",id:"humanchatmessage",level:2},{value:"AIChatMessage",id:"aichatmessage",level:2}],m={toc:l},h="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(h,(0,s.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"chat-messages"},"Chat Messages"),(0,n.kt)("p",null,"The primary interface through which end users interact with LLMs is a chat interface. For this reason, some model providers have started providing access to the underlying API in a way that expects chat messages. These messages have a content field (which is usually text) and are associated with a user (or role). Right now the supported users are System, Human, and AI."),(0,n.kt)("h2",{id:"systemchatmessage"},"SystemChatMessage"),(0,n.kt)("p",null,"A chat message representing information that should be instructions to the AI system."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},'new SystemChatMessage("You are a nice assistant");\n')),(0,n.kt)("h2",{id:"humanchatmessage"},"HumanChatMessage"),(0,n.kt)("p",null,"A chat message representing information coming from a human interacting with the AI system."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},'new HumanChatMessage("Hello, how are you?");\n')),(0,n.kt)("h2",{id:"aichatmessage"},"AIChatMessage"),(0,n.kt)("p",null,"A chat message representing information coming from the AI system."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},'new AIChatMessage("I am doing well, thank you!");\n')))}u.isMDXComponent=!0}}]);