"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2150],{9798:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7378),r=n(8944);const s={tabItem:"tabItem_wHwb"};function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s.tabItem,o),hidden:n},t)}},3930:(e,t,n)=>{n.d(t,{Z:()=>w});var a=n(5773),r=n(7378),s=n(8944),o=n(3457),u=n(3620),l=n(654),i=n(784),c=n(1819);function d(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,i.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function b(e){let{queryString:t=!1,groupId:n}=e;const a=(0,u.k6)(),s=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(s),(0,r.useCallback)((e=>{if(!s)return;const t=new URLSearchParams(a.location.search);t.set(s,e),a.replace({...a.location,search:t.toString()})}),[s,a])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,s=m(e),[o,u]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:s}))),[l,i]=b({queryString:n,groupId:a}),[d,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,s]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&s.set(e)}),[n,s])]}({groupId:a}),h=(()=>{const e=l??d;return p({value:e,tabValues:s})?e:null})();(0,r.useLayoutEffect)((()=>{h&&u(h)}),[h]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!p({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);u(e),i(e),g(e)}),[i,g,s]),tabValues:s}}var h=n(6457);const f={tabList:"tabList_J5MA",tabItem:"tabItem_l0OV"};function v(e){let{className:t,block:n,selectedValue:u,selectValue:l,tabValues:i}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),m=e=>{const t=e.currentTarget,n=c.indexOf(t),a=i[n].value;a!==u&&(d(t),l(a))},p=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},t)},i.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:u===t?0:-1,"aria-selected":u===t,key:t,ref:e=>c.push(e),onKeyDown:p,onClick:m},o,{className:(0,s.Z)("tabs__item",f.tabItem,o?.className,{"tabs__item--active":u===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:a}=e;if(n=Array.isArray(n)?n:[n],t){const e=n.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function k(e){const t=g(e);return r.createElement("div",{className:(0,s.Z)("tabs-container",f.tabList)},r.createElement(v,(0,a.Z)({},e,t)),r.createElement(y,(0,a.Z)({},e,t)))}function w(e){const t=(0,h.Z)();return r.createElement(k,(0,a.Z)({key:String(t)},e))}},1865:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>p});var a=n(5773),r=(n(7378),n(5318)),s=n(3930),o=n(9798),u=n(6538);const l='import { SupabaseVectorStore } from "langchain/vectorstores";\nimport { OpenAIEmbeddings } from "langchain/embeddings";\nimport { createClient } from "@supabase/supabase-js";\n\nexport const run = async () => {\n  const client = createClient(\n    process.env.SUPABASE_URL || "",\n    process.env.SUPABASE_PRIVATE_KEY || ""\n  );\n\n  const vectorStore = await SupabaseVectorStore.fromTexts(\n    ["Hello world", "Bye bye", "What\'s this?"],\n    [{ id: 2 }, { id: 1 }, { id: 3 }],\n    new OpenAIEmbeddings(),\n    {\n      client,\n      tableName: "documents",\n      queryName: "match_documents",\n    }\n  );\n\n  const resultOne = await vectorStore.similaritySearch("Hello world", 1);\n\n  console.log(resultOne);\n};\n',i={},c="Supabase",d={unversionedId:"modules/indexes/vector_stores/integrations/supabase",id:"modules/indexes/vector_stores/integrations/supabase",title:"Supabase",description:"Langchain supports using Supabase Postgres database as a vector store, using the pgvector postgres extension. Refer to the Supabase blog post for more information.",source:"@site/docs/modules/indexes/vector_stores/integrations/supabase.mdx",sourceDirName:"modules/indexes/vector_stores/integrations",slug:"/modules/indexes/vector_stores/integrations/supabase",permalink:"/langchainjs/docs/modules/indexes/vector_stores/integrations/supabase",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/docs/modules/indexes/vector_stores/integrations/supabase.mdx",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Pinecone",permalink:"/langchainjs/docs/modules/indexes/vector_stores/integrations/pinecone"},next:{title:"Retrievers",permalink:"/langchainjs/docs/modules/indexes/retrievers/"}},m={},p=[{value:"Setup",id:"setup",level:2},{value:"Install the library with",id:"install-the-library-with",level:3},{value:"Create a table and search function in your database",id:"create-a-table-and-search-function-in-your-database",level:3},{value:"Usage",id:"usage",level:2}],b={toc:p},g="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(g,(0,a.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"supabase"},"Supabase"),(0,r.kt)("p",null,"Langchain supports using Supabase Postgres database as a vector store, using the ",(0,r.kt)("inlineCode",{parentName:"p"},"pgvector")," postgres extension. Refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://supabase.com/blog/openai-embeddings-postgres-vector"},"Supabase blog post")," for more information."),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("h3",{id:"install-the-library-with"},"Install the library with"),(0,r.kt)(s.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -S @supabase/supabase-js\n"))),(0,r.kt)(o.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add -S @supabase/supabase-js\n")))),(0,r.kt)("h3",{id:"create-a-table-and-search-function-in-your-database"},"Create a table and search function in your database"),(0,r.kt)("p",null,"Run this in your database:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- Enable the pgvector extension to work with embedding vectors\ncreate extension vector;\n\n-- Create a table to store your documents\ncreate table documents (\n  id bigserial primary key,\n  content text, -- corresponds to Document.pageContent\n  metadata jsonb, -- corresponds to Document.metadata\n  embedding vector(1536) -- 1536 works for OpenAI embeddings, change if needed\n);\n\n-- Create a function to search for documents\ncreate function match_documents (\n  query_embedding vector(1536),\n  match_count int\n) returns table (\n  id bigint,\n  content text,\n  metadata jsonb,\n  similarity float\n)\nlanguage plpgsql\nas $$\n#variable_conflict use_column\nbegin\n  return query\n  select\n    id,\n    content,\n    metadata,\n    1 - (documents.embedding <=> query_embedding) as similarity\n  from documents\n  order by documents.embedding <=> query_embedding\n  limit match_count;\nend;\n$$;\n\n-- Create an index to be used by the search function\ncreate index on documents\n  using ivfflat (embedding vector_cosine_ops)\n  with (lists = 100);\n")),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)(u.Z,{language:"typescript",mdxType:"CodeBlock"},l))}h.isMDXComponent=!0}}]);