"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5115],{6505:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>h,frontMatter:()=>m,metadata:()=>c,toc:()=>i});var a=n(5773),s=(n(7378),n(5318)),o=n(6538);const l='import { LLMChain } from "langchain";\nimport { ChatOpenAI } from "langchain/chat_models";\nimport { ZeroShotAgent, AgentExecutor } from "langchain/agents";\nimport { SerpAPI } from "langchain/tools";\nimport {\n  ChatPromptTemplate,\n  SystemMessagePromptTemplate,\n  HumanMessagePromptTemplate,\n} from "langchain/prompts";\n\nexport const run = async () => {\n  const tools = [new SerpAPI()];\n\n  const prompt = ZeroShotAgent.createPrompt(tools, {\n    prefix: `Answer the following questions as best you can, but speaking as a pirate might speak. You have access to the following tools:`,\n    suffix: `Begin! Remember to speak as a pirate when giving your final answer. Use lots of "Args"`,\n  });\n\n  const chatPrompt = ChatPromptTemplate.fromPromptMessages([\n    new SystemMessagePromptTemplate(prompt),\n    HumanMessagePromptTemplate.fromTemplate(`{input}\n\nThis was your previous work (but I haven\'t seen any of it! I only see what you return as final answer):\n{agent_scratchpad}`),\n  ]);\n\n  const chat = new ChatOpenAI({});\n\n  const llmChain = new LLMChain({\n    prompt: chatPrompt,\n    llm: chat,\n  });\n\n  const agent = new ZeroShotAgent({\n    llmChain,\n    allowedTools: tools.map((tool) => tool.name),\n  });\n\n  const executor = AgentExecutor.fromAgentAndTools({ agent, tools });\n\n  const response = await executor.run(\n    "How many people live in canada as of 2023?"\n  );\n\n  console.log(response);\n};\n',m={hide_table_of_contents:!0},r="Custom Agent, using Chat Models",c={unversionedId:"modules/agents/agents/examples/custom_agent_chat",id:"modules/agents/agents/examples/custom_agent_chat",title:"Custom Agent, using Chat Models",description:"This example covers how to create a custom agent for a chat model. It will utilize chat specific prompts.",source:"@site/docs/modules/agents/agents/examples/custom_agent_chat.mdx",sourceDirName:"modules/agents/agents/examples",slug:"/modules/agents/agents/examples/custom_agent_chat",permalink:"/langchainjs/docs/modules/agents/agents/examples/custom_agent_chat",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/docs/modules/agents/agents/examples/custom_agent_chat.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"sidebar",previous:{title:"Conversational Agent",permalink:"/langchainjs/docs/modules/agents/agents/examples/conversational_agent"},next:{title:"Custom Agent, using LLMs",permalink:"/langchainjs/docs/modules/agents/agents/examples/custom_agent_llm"}},p={},i=[],g={toc:i},u="wrapper";function h(e){let{components:t,...n}=e;return(0,s.kt)(u,(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"custom-agent-using-chat-models"},"Custom Agent, using Chat Models"),(0,s.kt)("p",null,"This example covers how to create a custom agent for a chat model. It will utilize chat specific prompts."),(0,s.kt)(o.Z,{language:"typescript",mdxType:"CodeBlock"},l))}h.isMDXComponent=!0}}]);