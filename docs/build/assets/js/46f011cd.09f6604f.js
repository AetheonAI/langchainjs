"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6397],{5318:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7378);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=o,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||a;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2695:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(5773),o=(n(7378),n(5318));const a={sidebar_position:3,sidebar_label:"Integrations"},i="Integrations: Chat Models",s={unversionedId:"modules/models/chat/integrations",id:"modules/models/chat/integrations",title:"Integrations: Chat Models",description:"LangChain offers a number of Chat Models implementations that integrate with various model providers. These are:",source:"@site/docs/modules/models/chat/integrations.mdx",sourceDirName:"modules/models/chat",slug:"/modules/models/chat/integrations",permalink:"/langchainjs/docs/modules/models/chat/integrations",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/docs/modules/models/chat/integrations.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"Integrations"},sidebar:"sidebar",previous:{title:"Chat Models",permalink:"/langchainjs/docs/modules/models/chat/"},next:{title:"Additional Functionality",permalink:"/langchainjs/docs/modules/models/chat/additional_functionality"}},l={},c=[{value:"<code>OpenAI</code>",id:"openai",level:2},{value:"<code>Anthropic</code>",id:"anthropic",level:2}],p={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"integrations-chat-models"},"Integrations: Chat Models"),(0,o.kt)("p",null,"LangChain offers a number of Chat Models implementations that integrate with various model providers. These are:"),(0,o.kt)("h2",{id:"openai"},(0,o.kt)("inlineCode",{parentName:"h2"},"OpenAI")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { ChatOpenAI } from "langchain/chat_models";\n\n// Expects an OpenAI API key to be set in the env variable OPENAI_API_KEY\nconst model = new ChatOpenAI({ temperature: 0.9 });\n')),(0,o.kt)("h2",{id:"anthropic"},(0,o.kt)("inlineCode",{parentName:"h2"},"Anthropic")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { ChatAnthropic } from "langchain/chat_models";\n\n// Expects an Anthropic API key to be set in the env variable ANTHROPIC_API_KEY\nconst model = new ChatAnthropic({ temperature: 0.9 });\n')))}m.isMDXComponent=!0}}]);