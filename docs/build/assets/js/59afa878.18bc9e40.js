"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8441],{5162:(e,t,n)=>{n.d(t,{Z:()=>f});var a=n(7378),i=n(8944),o=n(5161),s=n(1884),l=n(5626),r=n(9213);const c={cardContainer:"cardContainer_H47c",cardTitle:"cardTitle_tTnA",cardDescription:"cardDescription_rTl4"};function d(e){let{href:t,children:n}=e;return a.createElement(s.Z,{href:t,className:(0,i.Z)("card padding--lg",c.cardContainer)},n)}function m(e){let{href:t,icon:n,title:o,description:s}=e;return a.createElement(d,{href:t},a.createElement("h2",{className:(0,i.Z)("text--truncate",c.cardTitle),title:o},n," ",o),s&&a.createElement("p",{className:(0,i.Z)("text--truncate",c.cardDescription),title:s},s))}function p(e){let{item:t}=e;const n=(0,o.Wl)(t);return n?a.createElement(m,{href:n,icon:"\ud83d\uddc3\ufe0f",title:t.label,description:(0,r.I)({message:"{count} items",id:"theme.docs.DocCard.categoryDescription",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t.items.length})}):null}function u(e){let{item:t}=e;const n=(0,l.Z)(t.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",i=(0,o.xz)(t.docId??void 0);return a.createElement(m,{href:t.href,icon:n,title:t.label,description:i?.description})}function g(e){let{item:t}=e;switch(t.type){case"link":return a.createElement(u,{item:t});case"category":return a.createElement(p,{item:t});default:throw new Error(`unknown item type ${JSON.stringify(t)}`)}}function h(e){let{className:t}=e;const n=(0,o.jA)();return a.createElement(f,{items:n.items,className:t})}function f(e){const{items:t,className:n}=e;if(!t)return a.createElement(h,e);const s=(0,o.MN)(t);return a.createElement("section",{className:(0,i.Z)("row",n)},s.map(((e,t)=>a.createElement("article",{key:t,className:"col col--6 margin-bottom--lg"},a.createElement(g,{item:e})))))}},7308:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>p});var a=n(5773),i=(n(7378),n(5318)),o=n(6538);const s='import { OpenAI } from "langchain/llms";\n\nexport const run = async () => {\n  const model = new OpenAI();\n  // `call` is a simple string-in, string-out method for interacting with the model.\n  const resA = await model.call(\n    "What would be a good company name a company that makes colorful socks?"\n  );\n  console.log({ resA });\n  // { resA: \'\\n\\nSocktastic Colors\' }\n};\n';var l=n(5162);const r={hide_table_of_contents:!0,sidebar_label:"LLMs"},c="Getting Started: LLMs",d={unversionedId:"modules/models/llms/index",id:"modules/models/llms/index",title:"Getting Started: LLMs",description:"Conceptual Guide",source:"@site/docs/modules/models/llms/index.mdx",sourceDirName:"modules/models/llms",slug:"/modules/models/llms/",permalink:"/langchainjs/docs/modules/models/llms/",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/docs/modules/models/llms/index.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0,sidebar_label:"LLMs"},sidebar:"sidebar",previous:{title:"Additional Functionality",permalink:"/langchainjs/docs/modules/models/embeddings/additional_functionality"},next:{title:"Integrations",permalink:"/langchainjs/docs/modules/models/llms/integrations"}},m={},p=[{value:"Dig deeper",id:"dig-deeper",level:2}],u={toc:p},g="wrapper";function h(e){let{components:t,...n}=e;return(0,i.kt)(g,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"getting-started-llms"},"Getting Started: LLMs"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"https://docs.langchain.com/docs/components/models/language-model"},"Conceptual Guide"))),(0,i.kt)("p",null,"LangChain provides a standard interface for using a variety of LLMs."),(0,i.kt)("p",null,"To get started, simply use the ",(0,i.kt)("inlineCode",{parentName:"p"},"call")," method of an ",(0,i.kt)("inlineCode",{parentName:"p"},"LLM")," implementation, passing in a ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," input. In this example, we are using the ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenAI")," implementation:"),(0,i.kt)(o.Z,{language:"typescript",mdxType:"CodeBlock"},s),(0,i.kt)("h2",{id:"dig-deeper"},"Dig deeper"),(0,i.kt)(l.Z,{mdxType:"DocCardList"}))}h.isMDXComponent=!0}}]);