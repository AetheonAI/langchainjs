"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5313],{3423:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>h,contentTitle:()=>i,default:()=>g,frontMatter:()=>m,metadata:()=>u,toc:()=>c});var n=a(5773),o=(a(7378),a(5318)),s=a(6538);const p='import {\n  ChatPromptTemplate,\n  HumanMessagePromptTemplate,\n  PromptTemplate,\n  SystemMessagePromptTemplate,\n} from "langchain/prompts";\n\nexport const run = async () => {\n  const template = "What is a good name for a company that makes {product}?";\n  const promptA = new PromptTemplate({ template, inputVariables: ["product"] });\n\n  // The `formatPromptValue` method returns a `PromptValue` object that can be used to format the prompt as a string or a list of `ChatMessage` objects.\n  const responseA = await promptA.formatPromptValue({\n    product: "colorful socks",\n  });\n  const responseAString = responseA.toString();\n  console.log({ responseAString });\n  /*\n    {\n        responseAString: \'What is a good name for a company that makes colorful socks?\'\n    }\n    */\n\n  const responseAMessages = responseA.toChatMessages();\n  console.log({ responseAMessages });\n  /*\n    {\n        responseAMessages: [\n            HumanChatMessage {\n                text: \'What is a good name for a company that makes colorful socks?\'\n            }\n        ]\n    }\n    */\n\n  const chatPrompt = ChatPromptTemplate.fromPromptMessages([\n    SystemMessagePromptTemplate.fromTemplate(\n      "You are a helpful assistant that translates {input_language} to {output_language}."\n    ),\n    HumanMessagePromptTemplate.fromTemplate("{text}"),\n  ]);\n\n  // `formatPromptValue` also works with `ChatPromptTemplate`.\n  const responseB = await chatPrompt.formatPromptValue({\n    input_language: "English",\n    output_language: "French",\n    text: "I love programming.",\n  });\n  const responseBString = responseB.toString();\n  console.log({ responseBString });\n  /*\n    {\n        responseBString: \'[{"text":"You are a helpful assistant that translates English to French."},{"text":"I love programming."}]\'\n    }\n    */\n\n  const responseBMessages = responseB.toChatMessages();\n  console.log({ responseBMessages });\n  /*\n    {\n        responseBMessages: [\n            SystemChatMessage {\n                text: \'You are a helpful assistant that translates English to French.\'\n            },\n            HumanChatMessage { text: \'I love programming.\' }\n        ]\n    }\n    */\n};\n',r='import { PromptTemplate } from "langchain/prompts";\n\nexport const run = async () => {\n  // The `partial` method returns a new `PromptTemplate` object that can be used to format the prompt with only some of the input variables.\n  const promptA = new PromptTemplate({\n    template: "{foo}{bar}",\n    inputVariables: ["foo", "bar"],\n  });\n  const partialPromptA = await promptA.partial({ foo: "foo" });\n  console.log(await partialPromptA.format({ bar: "bar" }));\n  // foobar\n\n  // You can also explicitly specify the partial variables when creating the `PromptTemplate` object.\n  const promptB = new PromptTemplate({\n    template: "{foo}{bar}",\n    inputVariables: ["foo"],\n    partialVariables: { bar: "bar" },\n  });\n  console.log(await promptB.format({ foo: "foo" }));\n  // foobar\n\n  // You can also use partial formatting with function inputs instead of string inputs.\n  const promptC = new PromptTemplate({\n    template: "Tell me a {adjective} joke about the day {date}",\n    inputVariables: ["adjective", "date"],\n  });\n  const partialPromptC = await promptC.partial({\n    date: () => new Date().toLocaleDateString(),\n  });\n  console.log(await partialPromptC.format({ adjective: "funny" }));\n  // Tell me a funny joke about the day 3/22/2023\n\n  const promptD = new PromptTemplate({\n    template: "Tell me a {adjective} joke about the day {date}",\n    inputVariables: ["adjective"],\n    partialVariables: { date: () => new Date().toLocaleDateString() },\n  });\n  console.log(await promptD.format({ adjective: "funny" }));\n  // Tell me a funny joke about the day 3/22/2023\n};\n',l='import { FewShotPromptTemplate, PromptTemplate } from "langchain/prompts";\n\nexport const run = async () => {\n  // First, create a list of few-shot examples.\n  const examples = [\n    { word: "happy", antonym: "sad" },\n    { word: "tall", antonym: "short" },\n  ];\n\n  // Next, we specify the template to format the examples we have provided.\n  const exampleFormatterTemplate = "Word: {word}\\nAntonym: {antonym}\\n";\n  const examplePrompt = new PromptTemplate({\n    inputVariables: ["word", "antonym"],\n    template: exampleFormatterTemplate,\n  });\n  // Finally, we create the `FewShotPromptTemplate`\n  const fewShotPrompt = new FewShotPromptTemplate({\n    /* These are the examples we want to insert into the prompt. */\n    examples,\n    /* This is how we want to format the examples when we insert them into the prompt. */\n    examplePrompt,\n    /* The prefix is some text that goes before the examples in the prompt. Usually, this consists of intructions. */\n    prefix: "Give the antonym of every input",\n    /* The suffix is some text that goes after the examples in the prompt. Usually, this is where the user input will go */\n    suffix: "Word: {input}\\nAntonym:",\n    /* The input variables are the variables that the overall prompt expects. */\n    inputVariables: ["input"],\n    /* The example_separator is the string we will use to join the prefix, examples, and suffix together with. */\n    exampleSeparator: "\\n\\n",\n    /* The template format is the formatting method to use for the template. Should usually be f-string. */\n    templateFormat: "f-string",\n  });\n\n  // We can now generate a prompt using the `format` method.\n  console.log(await fewShotPrompt.format({ input: "big" }));\n  /*\n  Give the antonym of every input\n\n  Word: happy\n  Antonym: sad\n\n\n  Word: tall\n  Antonym: short\n\n\n  Word: big\n  Antonym:\n  */\n};\n',m={sidebar_label:"Additional Functionality"},i="Additional Functionality: Prompt Templates",u={unversionedId:"modules/prompts/prompt_templates/additional_functionality",id:"modules/prompts/prompt_templates/additional_functionality",title:"Additional Functionality: Prompt Templates",description:"We offer a number of extra features for prompt templates, as shown below:",source:"@site/docs/modules/prompts/prompt_templates/additional_functionality.mdx",sourceDirName:"modules/prompts/prompt_templates",slug:"/modules/prompts/prompt_templates/additional_functionality",permalink:"/langchainjs/docs/modules/prompts/prompt_templates/additional_functionality",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/docs/modules/prompts/prompt_templates/additional_functionality.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Additional Functionality"},sidebar:"sidebar",previous:{title:"Prompt Templates",permalink:"/langchainjs/docs/modules/prompts/prompt_templates/"},next:{title:"Output Parsers",permalink:"/langchainjs/docs/modules/prompts/output_parsers/"}},h={},c=[{value:"Prompt Values",id:"prompt-values",level:2},{value:"Partial Values",id:"partial-values",level:2},{value:"Few-Shot Prompt Templates",id:"few-shot-prompt-templates",level:2}],d={toc:c},f="wrapper";function g(t){let{components:e,...a}=t;return(0,o.kt)(f,(0,n.Z)({},d,a,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"additional-functionality-prompt-templates"},"Additional Functionality: Prompt Templates"),(0,o.kt)("p",null,"We offer a number of extra features for prompt templates, as shown below:"),(0,o.kt)("h2",{id:"prompt-values"},"Prompt Values"),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"PromptValue")," is an object returned by the ",(0,o.kt)("inlineCode",{parentName:"p"},"formatPromptValue")," of a ",(0,o.kt)("inlineCode",{parentName:"p"},"PromptTemplate"),". It can be converted to a string or list of ",(0,o.kt)("inlineCode",{parentName:"p"},"ChatMessage")," objects."),(0,o.kt)(s.Z,{language:"typescript",mdxType:"CodeBlock"},p),(0,o.kt)("h2",{id:"partial-values"},"Partial Values"),(0,o.kt)("p",null,'Like other methods, it can make sense to "partial" a prompt template - eg pass in a subset of the required values, as to create a new prompt template which expects only the remaining subset of values.'),(0,o.kt)("p",null,"LangChain supports this in two ways:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Partial formatting with string values."),(0,o.kt)("li",{parentName:"ol"},"Partial formatting with functions that return string values.")),(0,o.kt)("p",null,"These two different ways support different use cases. In the examples below, we go over the motivations for both use cases as well as how to do it in LangChain."),(0,o.kt)(s.Z,{language:"typescript",mdxType:"CodeBlock"},r),(0,o.kt)("h2",{id:"few-shot-prompt-templates"},"Few-Shot Prompt Templates"),(0,o.kt)("p",null,"A few-shot prompt template is a prompt template you can build with examples."),(0,o.kt)(s.Z,{language:"typescript",mdxType:"CodeBlock"},l))}g.isMDXComponent=!0}}]);