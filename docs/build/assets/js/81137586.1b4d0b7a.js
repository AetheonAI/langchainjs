"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2079],{5318:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7378);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(r),m=a,f=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return r?n.createElement(f,s(s({ref:t},p),{},{components:r})):n.createElement(f,s({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5721:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=r(5773),a=(r(7378),r(5318));const o={hide_table_of_contents:!0},s="CharacterTextSplitter",i={unversionedId:"modules/indexes/text_splitters/examples/character",id:"modules/indexes/text_splitters/examples/character",title:"CharacterTextSplitter",description:'Besides the RecursiveCharacterTextSplitter, there is also the more standard CharacterTextSplitter. This splits only on one type of character (defaults to "\\n\\n"). You can use it in the exact same way.',source:"@site/docs/modules/indexes/text_splitters/examples/character.mdx",sourceDirName:"modules/indexes/text_splitters/examples",slug:"/modules/indexes/text_splitters/examples/character",permalink:"/langchainjs/docs/modules/indexes/text_splitters/examples/character",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/docs/modules/indexes/text_splitters/examples/character.mdx",tags:[],version:"current",frontMatter:{hide_table_of_contents:!0},sidebar:"sidebar",previous:{title:"Examples",permalink:"/langchainjs/docs/modules/indexes/text_splitters/examples/"},next:{title:"MarkdownTextSplitter",permalink:"/langchainjs/docs/modules/indexes/text_splitters/examples/markdown"}},c={},l=[],p={toc:l},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"charactertextsplitter"},"CharacterTextSplitter"),(0,a.kt)("p",null,"Besides the ",(0,a.kt)("inlineCode",{parentName:"p"},"RecursiveCharacterTextSplitter"),", there is also the more standard ",(0,a.kt)("inlineCode",{parentName:"p"},"CharacterTextSplitter"),". This splits only on one type of character (defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},'"\\n\\n"'),"). You can use it in the exact same way."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { Document } from "langchain/document";\nimport { CharacterTextSplitter } from "langchain/text_splitter";\n\nconst text = "foo bar baz 123";\nconst splitter = new CharacterTextSplitter({\n  separator: " ",\n  chunkSize: 7,\n  chunkOverlap: 3,\n});\nconst output = splitter.createDocuments([text]);\n')))}d.isMDXComponent=!0}}]);