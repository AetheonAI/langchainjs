"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4364],{5318:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(n),m=i,f=p["".concat(l,".").concat(m)]||p[m]||u[m]||s;return n?r.createElement(f,a(a({ref:t},d),{},{components:n})):r.createElement(f,a({ref:t},d))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,a=new Array(s);a[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:i,a[1]=o;for(var c=2;c<s;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>x});var r=n(7378),i=n(8944),s=n(5161),a=n(1884),o=n(5626),l=n(9213);const c={cardContainer:"cardContainer_H47c",cardTitle:"cardTitle_tTnA",cardDescription:"cardDescription_rTl4"};function d(e){let{href:t,children:n}=e;return r.createElement(a.Z,{href:t,className:(0,i.Z)("card padding--lg",c.cardContainer)},n)}function p(e){let{href:t,icon:n,title:s,description:a}=e;return r.createElement(d,{href:t},r.createElement("h2",{className:(0,i.Z)("text--truncate",c.cardTitle),title:s},n," ",s),a&&r.createElement("p",{className:(0,i.Z)("text--truncate",c.cardDescription),title:a},a))}function u(e){let{item:t}=e;const n=(0,s.Wl)(t);return n?r.createElement(p,{href:n,icon:"\ud83d\uddc3\ufe0f",title:t.label,description:(0,l.I)({message:"{count} items",id:"theme.docs.DocCard.categoryDescription",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t.items.length})}):null}function m(e){let{item:t}=e;const n=(0,o.Z)(t.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",i=(0,s.xz)(t.docId??void 0);return r.createElement(p,{href:t.href,icon:n,title:t.label,description:i?.description})}function f(e){let{item:t}=e;switch(t.type){case"link":return r.createElement(m,{item:t});case"category":return r.createElement(u,{item:t});default:throw new Error(`unknown item type ${JSON.stringify(t)}`)}}function h(e){let{className:t}=e;const n=(0,s.jA)();return r.createElement(x,{items:n.items,className:t})}function x(e){const{items:t,className:n}=e;if(!t)return r.createElement(h,e);const a=(0,s.MN)(t);return r.createElement("section",{className:(0,i.Z)("row",n)},a.map(((e,t)=>r.createElement("article",{key:t,className:"col col--6 margin-bottom--lg"},r.createElement(f,{item:e})))))}},4705:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=n(5773),i=(n(7378),n(5318)),s=n(5162);const a={sidebar_label:"Text Splitters",hide_table_of_contents:!0,sidebar_position:2},o="Getting Started: Text Splitters",l={unversionedId:"modules/indexes/text_splitters/index",id:"modules/indexes/text_splitters/index",title:"Getting Started: Text Splitters",description:"Conceptual Guide",source:"@site/docs/modules/indexes/text_splitters/index.mdx",sourceDirName:"modules/indexes/text_splitters",slug:"/modules/indexes/text_splitters/",permalink:"/langchainjs/docs/modules/indexes/text_splitters/",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/docs/modules/indexes/text_splitters/index.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_label:"Text Splitters",hide_table_of_contents:!0,sidebar_position:2},sidebar:"sidebar",previous:{title:"IMSDB",permalink:"/langchainjs/docs/modules/indexes/document_loaders/examples/web_loaders/imsdb"},next:{title:"Examples",permalink:"/langchainjs/docs/modules/indexes/text_splitters/examples/"}},c={},d=[{value:"All Text Splitters",id:"all-text-splitters",level:2},{value:"Advanced",id:"advanced",level:2}],p={toc:d},u="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"getting-started-text-splitters"},"Getting Started: Text Splitters"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("a",{parentName:"p",href:"https://docs.langchain.com/docs/components/indexing/text-splitters"},"Conceptual Guide"))),(0,i.kt)("p",null,"Language Models are often limited by the amount of text that you can pass to them. Therefore, it is neccessary to split them up into smaller chunks. LangChain provides several utilities for doing so."),(0,i.kt)("p",null,"Using a Text Splitter can also help improve the results from vector store searches, as eg. smaller chunks may sometimes be more likely to match a query. Testing different chunk sizes (and chunk overlap) is a worthwhile exercise to tailor the results to your use case."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface TextSplitter {\n  chunkSize: number;\n\n  chunkOverlap: number;\n\n  createDocuments(\n    texts: string[],\n    metadatas?: Record<string, any>[]\n  ): Promise<Document[]>;\n\n  splitDocuments(documents: Document[]): Promise<Document[]>;\n}\n")),(0,i.kt)("p",null,"Text Splitters expose two methods, ",(0,i.kt)("inlineCode",{parentName:"p"},"createDocuments")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"splitDocuments"),". The former takes a list of raw text strings and returns a list of documents. The latter takes a list of documents and returns a list of documents. The difference is that ",(0,i.kt)("inlineCode",{parentName:"p"},"createDocuments")," will split the raw text strings into chunks, while ",(0,i.kt)("inlineCode",{parentName:"p"},"splitDocuments")," will split the documents into chunks."),(0,i.kt)("h2",{id:"all-text-splitters"},"All Text Splitters"),(0,i.kt)(s.Z,{mdxType:"DocCardList"}),(0,i.kt)("h2",{id:"advanced"},"Advanced"),(0,i.kt)("p",null,"If you want to implement your own custom Text Splitter, you only need to subclass TextSplitter and implement a single method ",(0,i.kt)("inlineCode",{parentName:"p"},"splitText"),". The method takes a string and returns a list of strings. The returned strings will be used as the chunks."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"abstract class TextSplitter {\n  abstract splitText(text: string): Promise<string[]>;\n}\n")))}m.isMDXComponent=!0}}]);