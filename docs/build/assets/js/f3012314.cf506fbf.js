"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3889],{5318:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>y});var r=n(7378);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=c(n),p=a,y=u["".concat(l,".").concat(p)]||u[p]||d[p]||o;return n?r.createElement(y,s(s({ref:t},m),{},{components:n})):r.createElement(y,s({ref:t},m))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>f});var r=n(7378),a=n(8944),o=n(5161),s=n(1884),i=n(5626),l=n(9213);const c={cardContainer:"cardContainer_H47c",cardTitle:"cardTitle_tTnA",cardDescription:"cardDescription_rTl4"};function m(e){let{href:t,children:n}=e;return r.createElement(s.Z,{href:t,className:(0,a.Z)("card padding--lg",c.cardContainer)},n)}function u(e){let{href:t,icon:n,title:o,description:s}=e;return r.createElement(m,{href:t},r.createElement("h2",{className:(0,a.Z)("text--truncate",c.cardTitle),title:o},n," ",o),s&&r.createElement("p",{className:(0,a.Z)("text--truncate",c.cardDescription),title:s},s))}function d(e){let{item:t}=e;const n=(0,o.Wl)(t);return n?r.createElement(u,{href:n,icon:"\ud83d\uddc3\ufe0f",title:t.label,description:(0,l.I)({message:"{count} items",id:"theme.docs.DocCard.categoryDescription",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t.items.length})}):null}function p(e){let{item:t}=e;const n=(0,i.Z)(t.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",a=(0,o.xz)(t.docId??void 0);return r.createElement(u,{href:t.href,icon:n,title:t.label,description:a?.description})}function y(e){let{item:t}=e;switch(t.type){case"link":return r.createElement(p,{item:t});case"category":return r.createElement(d,{item:t});default:throw new Error(`unknown item type ${JSON.stringify(t)}`)}}function h(e){let{className:t}=e;const n=(0,o.jA)();return r.createElement(f,{items:n.items,className:t})}function f(e){const{items:t,className:n}=e;if(!t)return r.createElement(h,e);const s=(0,o.MN)(t);return r.createElement("section",{className:(0,a.Z)("row",n)},s.map(((e,t)=>r.createElement("article",{key:t,className:"col col--6 margin-bottom--lg"},r.createElement(y,{item:e})))))}},7962:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>m});var r=n(5773),a=(n(7378),n(5318)),o=n(5162);const s={sidebar_label:"Memory",sidebar_position:5},i="Getting Started: Memory",l={unversionedId:"modules/memory/index",id:"modules/memory/index",title:"Getting Started: Memory",description:"Conceptual Guide",source:"@site/docs/modules/memory/index.mdx",sourceDirName:"modules/memory",slug:"/modules/memory/",permalink:"/langchainjs/docs/modules/memory/",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/docs/modules/memory/index.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_label:"Memory",sidebar_position:5},sidebar:"sidebar",previous:{title:"VectorStore",permalink:"/langchainjs/docs/modules/indexes/retrievers/vectorstore"},next:{title:"Examples",permalink:"/langchainjs/docs/modules/memory/examples/"}},c={},m=[{value:"All Memory classes",id:"all-memory-classes",level:2},{value:"Advanced",id:"advanced",level:2},{value:"Subclassing <code>BaseChatMemory</code>",id:"subclassing-basechatmemory",level:3},{value:"Subclassing <code>BaseMemory</code>",id:"subclassing-basememory",level:3}],u={toc:m},d="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started-memory"},"Getting Started: Memory"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"https://docs.langchain.com/docs/components/memory"},"Conceptual Guide"))),(0,a.kt)("p",null,"Memory is the concept of storing and retrieving data in the process of a conversation. There are two main methods, ",(0,a.kt)("inlineCode",{parentName:"p"},"loadMemoryVariables")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"saveContext"),". The first method is used to retrieve data from memory (optionally using the current input values), and the second method is used to store data in memory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export type InputValues = Record<string, any>;\n\nexport type OutputValues = Record<string, any>;\n\ninterface BaseMemory {\n  loadMemoryVariables(values: InputValues): Promise<MemoryVariables>;\n\n  saveContext(\n    inputValues: InputValues,\n    outputValues: OutputValues\n  ): Promise<void>;\n}\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Do not share the same memory instance between two different chains, a memory instance represents the history of a single conversation")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"If you deploy your LangChain app on a serverless environment do not store memory instances in a variable, as your hosting provider may have reset it by the next time the function is called.")),(0,a.kt)("h2",{id:"all-memory-classes"},"All Memory classes"),(0,a.kt)(o.Z,{mdxType:"DocCardList"}),(0,a.kt)("h2",{id:"advanced"},"Advanced"),(0,a.kt)("p",null,"To implement your own memory class you have two options:"),(0,a.kt)("h3",{id:"subclassing-basechatmemory"},"Subclassing ",(0,a.kt)("inlineCode",{parentName:"h3"},"BaseChatMemory")),(0,a.kt)("p",null,"This is the easiest way to implement your own memory class. You can subclass ",(0,a.kt)("inlineCode",{parentName:"p"},"BaseChatMemory"),", which takes care of ",(0,a.kt)("inlineCode",{parentName:"p"},"saveContext")," by saving inputs and outputs as ",(0,a.kt)("a",{parentName:"p",href:"/langchainjs/docs/modules/schema/chat-messages"},"Chat Messages"),", and implement only the ",(0,a.kt)("inlineCode",{parentName:"p"},"loadMemoryVariables")," method. This method is responsible for returning the memory variables that are relevant for the current input values."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"abstract class BaseChatMemory extends BaseMemory {\n  chatHistory: ChatMessageHistory;\n\n  abstract loadMemoryVariables(values: InputValues): Promise<MemoryVariables>;\n}\n")),(0,a.kt)("h3",{id:"subclassing-basememory"},"Subclassing ",(0,a.kt)("inlineCode",{parentName:"h3"},"BaseMemory")),(0,a.kt)("p",null,"If you want to implement a more custom memory class, you can subclass ",(0,a.kt)("inlineCode",{parentName:"p"},"BaseMemory")," and implement both ",(0,a.kt)("inlineCode",{parentName:"p"},"loadMemoryVariables")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"saveContext")," methods. The ",(0,a.kt)("inlineCode",{parentName:"p"},"saveContext")," method is responsible for storing the input and output values in memory. The ",(0,a.kt)("inlineCode",{parentName:"p"},"loadMemoryVariables")," method is responsible for returning the memory variables that are relevant for the current input values."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"abstract class BaseMemory {\n  abstract loadMemoryVariables(values: InputValues): Promise<MemoryVariables>;\n\n  abstract saveContext(\n    inputValues: InputValues,\n    outputValues: OutputValues\n  ): Promise<void>;\n}\n")))}p.isMDXComponent=!0}}]);