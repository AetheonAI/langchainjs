"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7185],{5318:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var o=t(7378);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=o.createContext({}),c=function(e){var n=o.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return o.createElement(i.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},u=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),u=r,f=d["".concat(i,".").concat(u)]||d[u]||m[u]||a;return t?o.createElement(f,l(l({ref:n},p),{},{components:t})):o.createElement(f,l({ref:n},p))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=u;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[d]="string"==typeof e?e:r,l[1]=s;for(var c=2;c<a;c++)l[c]=t[c];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5489:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=t(5773),r=(t(7378),t(5318));const a={},l="JSON files",s={unversionedId:"modules/indexes/document_loaders/examples/file_loaders/json",id:"modules/indexes/document_loaders/examples/file_loaders/json",title:"JSON files",description:"The JSON loader use JSON pointer to target keys in your JSON files you want to target.",source:"@site/docs/modules/indexes/document_loaders/examples/file_loaders/json.md",sourceDirName:"modules/indexes/document_loaders/examples/file_loaders",slug:"/modules/indexes/document_loaders/examples/file_loaders/json",permalink:"/langchainjs/docs/modules/indexes/document_loaders/examples/file_loaders/json",draft:!1,editUrl:"https://github.com/hwchase17/langchainjs/docs/modules/indexes/document_loaders/examples/file_loaders/json.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"CSV files",permalink:"/langchainjs/docs/modules/indexes/document_loaders/examples/file_loaders/csv"},next:{title:"JSONLines files",permalink:"/langchainjs/docs/modules/indexes/document_loaders/examples/file_loaders/jsonlines"}},i={},c=[{value:"No JSON pointer example",id:"no-json-pointer-example",level:3},{value:"Using JSON pointer example",id:"using-json-pointer-example",level:3}],p={toc:c},d="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(d,(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"json-files"},"JSON files"),(0,r.kt)("p",null,"The JSON loader use ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/janl/node-jsonpointer"},"JSON pointer")," to target keys in your JSON files you want to target."),(0,r.kt)("h3",{id:"no-json-pointer-example"},"No JSON pointer example"),(0,r.kt)("p",null,"The most simple way of using it, is to specify no JSON pointer.\nThe loader will load all strings it finds in the JSON object."),(0,r.kt)("p",null,"Example JSON file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "texts": ["This is a sentence.", "This is another sentence."]\n}\n')),(0,r.kt)("p",null,"Example code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { JSONLoader } from "langchain/document_loaders";\n\nconst loader = new JSONLoader("src/document_loaders/example_data/example.json");\n\nconst docs = await loader.load();\n/*\n[\n  Document {\n    "metadata": {\n      "blobType": "application/json",\n      "line": 1,\n      "source": "blob",\n    },\n    "pageContent": "This is a sentence.",\n  },\n  Document {\n    "metadata": {\n      "blobType": "application/json",\n      "line": 2,\n      "source": "blob",\n    },\n    "pageContent": "This is another sentence.",\n  },\n]\n*/\n')),(0,r.kt)("h3",{id:"using-json-pointer-example"},"Using JSON pointer example"),(0,r.kt)("p",null,"You can do a more advanced scenario by choosing which keys in your JSON object you want to extract string from."),(0,r.kt)("p",null,'In this example, we want to only extract information from "from" and "surname" entries.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "1": {\n    "body": "BD 2023 SUMMER",\n    "from": "LinkedIn Job",\n    "labels": ["IMPORTANT", "CATEGORY_UPDATES", "INBOX"]\n  },\n  "2": {\n    "body": "Intern, Treasury and other roles are available",\n    "from": "LinkedIn Job2",\n    "labels": ["IMPORTANT"],\n    "other": {\n      "name": "plop",\n      "surname": "bob"\n    }\n  }\n}\n')),(0,r.kt)("p",null,"Example code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import { JSONLoader } from "langchain/document_loaders";\n\nconst loader = new JSONLoader(\n  "src/document_loaders/example_data/example.json",\n  ["/from", "/surname"]\n);\n\nconst docs = await loader.load();\n/*\n[\n  Document {\n    "metadata": {\n      "blobType": "application/json",\n      "line": 1,\n      "source": "blob",\n    },\n    "pageContent": "BD 2023 SUMMER",\n  },\n  Document {\n    "metadata": {\n      "blobType": "application/json",\n      "line": 2,\n      "source": "blob",\n    },\n    "pageContent": "LinkedIn Job",\n  },\n  ...\n]\n')))}m.isMDXComponent=!0}}]);